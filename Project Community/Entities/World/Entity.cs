using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Box2D.XNA;
using Entities.AI;
namespace Entities.World
{
    /// <summary>
    /// A game entity such as a player, building, npc, item or anything else that exists physically in a gameworld.
    /// </summary>
    /// <Owner>Justin Dale</Owner>
    public class Entity 
    {
        public Body my_Body { get; set; }
        public EntityType type { get; set; }
        protected GameWorld gameWorld;
        protected Game game;
        protected Texture2D currentFrame;
        protected int frameSpeed = 10;
        public bool isPlayer {get;set;}
        public bool delete = false;
        private PowerBar myPowerBar;
        public string animation;
        protected string lastAnimation;
        protected int frame;
        protected int frameCount;
        public Color color;
        protected List<Event> eventList;
        public AIBase ai;
        private Rectangle sourceRect;
        protected Vector2 origin;
        public String id { get; set; }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="gw">Gameworld reference this entity is in</param>
        /// <param name="et">The entity type</param>
        /// <param name="x">x coordinate in meters</param>
        /// <param name="y">y coordinate in meters</param>
        public Entity(GameWorld gw, EntityType et)
        {
            type = et;
            gameWorld = gw;
            game = gameWorld.getGame();
            myPowerBar = gameWorld.bar;
            eventList = new List<Event>();
            sourceRect = new Rectangle(0,0,1,1);
            origin = Vector2.Zero;
            isPlayer = false;
        }

        public PowerBar PowerBar
        {
            get
            {
                return myPowerBar;
            }
            set
            {
                myPowerBar = value;
            }
        }

        public Vector2 Size
        {
            get
            {
                return type.size;
            }
            set
            {
                type.size = value;
            }
        }

        public float Width
        {
            get
            {
                return type.size.X;
            }
        }

        public float Height
        {
            get
            {
                return type.size.Y;
            }
        }

        /// <summary>
        /// Called when Contacts are processed
        /// </summary>
        /// <param name="otherThing">Entity that this collided with</param>
        public virtual void collide(Entity otherThing, bool touching)  {    }
        
        /// <summary>
        /// handle control events generated by input or AI
        /// </summary>
        public virtual void handleEvents() {   }
        
        /// <summary>
        /// Draws this entity using the current SpriteBatch
        /// </summary>
        /// <param name="sb">SpriteBatch being used</param>
        public virtual void draw(SpriteBatch sb) 
        {
            if (!my_Body.IsActive())
                return;
            Vector2 pos =  my_Body.GetPosition();
            
            pos *= 64;
           float angle =  my_Body.GetAngle();
            //if (my_Body.GetFixtureList().ShapeType.Equals(ShapeType.Circle))
            //{

            //    angle = 0;
            //  //  Mat22 mat = new Mat22();
                
            //  //  CircleShape circle = (CircleShape)my_Body.GetFixtureList().GetShape();
            //  //  Transform xf;
            //  //  my_Body.GetTransform(out xf);
            //  //  //my_Body.get
            //  // // origin = MathUtils.Multiply(ref xf, Vector2.Zero);
            //  //  origin = my_Body.GetLocalCenter();
            //  //  origin *= 64;
            //  //  //origin -= pos;
            //  //  Vector2 axis = xf.R.col1;
            //  //  float radH = (float)Math.Sqrt(2 * (circle._radius * circle._radius));
            //  //  origin = new Vector2((float)Math.Cos(angle), (float)Math.Sin(angle)) * 64 * radH;

            //  //  //origin -= originDif;
            //  ////  pos = new Vector2(250, 250);
            //}
            
            pos.X -= gameWorld.viewport.X;
            pos.Y -= gameWorld.viewport.Y;
            if (type.shape.ShapeType.Equals(ShapeType.Circle))
            {
                angle = 0;
                pos.X -= type.shape._radius * 64;
                pos.Y -= type.shape._radius * 64;
            }
            if (game.GraphicsDevice.Viewport.Bounds.Intersects(new Rectangle((int)pos.X - 200, (int)pos.Y - 200, (int)type.size.X + 200, (int)type.size.Y + 200)))
            {
                if (type.type == TypeOfThing.BAR)
                {
                    sb.Draw(currentFrame, new Rectangle((int)pos.X, (int)pos.Y, (int)type.size.X, (int)type.size.Y), null, color, angle, origin, SpriteEffects.None, 0);
                }
                else
                {
                    sb.Draw(currentFrame, pos, null, color, angle, origin, 1, SpriteEffects.None, 0);
                }
            }

        }
        

        /// <summary>
        /// Performs animation operations based on state and the specific EntityType information
        /// </summary>
        public virtual void animate()
        {
            List<short> sequence;
            if (!animation.Equals(lastAnimation))
            {
                lastAnimation = animation;
                frameCount = 0;
                frame = 0;
            }
            if (!type.animations.TryGetValue(animation, out sequence))
            {
                throw new Exception("Type:" + type.fileName + " has no animation sequence called: " + animation );
            }
            if (frameCount >= frameSpeed)
            {
                frameCount = 0;
                frame++;
                if (frame > sequence.Count - 1)
                    frame = 0;
            }
            else
                frameCount++;
            short frameIndex = sequence.ElementAt(frame);
            currentFrame = type.images.ElementAt(frameIndex);          
        }
        
        /// <summary>
        /// Will this be used? 
        /// </summary>
        /// <param name="filename"></param>
        public virtual void load(String filename) {  }


        /// <summary>
        /// Adds an event to this entity's eventList
        /// </summary>
        /// <param name="eventToAdd"></param>
        public void addEvent(Event eventToAdd)
        {      
            eventList.Add(eventToAdd);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="fixture"></param>
        /// <returns></returns>
        public virtual bool AABBQueryCallback(Fixture fixture)
        {
            //Buildings/Characters should be added to a list of buildings to be displayed
            //The nearest item should be made available for pick-up and let the player know on screen
            return true;
        }

        /// <summary>
        /// Method called from contact filter to see if two things should collide.
        /// </summary>
        /// <param name="ent">Other thing</param>
        /// <returns>True if they should collide.</returns>
        public virtual bool shouldCollide(Entity ent)
        {
            return true;
        }

        /// <summary>
        /// Is this connected to the given body.
        /// </summary>
        /// <param name="other">Other body.</param>
        /// <returns>True if connected by a joint, false if otherwise.</returns>
        public bool areJoined(Body other)
        {
            JointEdge jointEdge = my_Body.GetJointList();
            while (jointEdge != null)
            {
                if (jointEdge.Joint.GetBodyB().Equals(other) || jointEdge.Joint.GetBodyA().Equals(other))
                {
                    return true;
                }
                jointEdge = jointEdge.Next;
            }
            return false;
        }
    }
}
